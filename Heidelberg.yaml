substitutions:
  # all substitutions for this project
  friendly_name: "Heidelberg Wallbox"
  device_name: "Heidelberg-Wallbox"
  ble_mac_address: !secret ble_mac_address
  tesla_vin: !secret tesla_vin
  charging_amps_max: "16"


esp32:
  board: esp32dev  # set as needed for your board
  framework:
    type: esp-idf


api:
  encryption:
    key: !secret api_encryption_key


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: 192.168.178.128


web_server:
  port: 80
  version: 2




esphome:
  name: ${device_name}
  name_add_mac_suffix: false
  friendly_name: ${friendly_name}
  on_boot:
      priority: -100  # Niedrige Priorität, um nach der Modbus-Initialisierung ausgeführt zu werden
      then:
        - number.set:
            id: heidelberg_charge_current
            value: 6  # Setzt den Ladestrom auf 6 A
        - number.set:
            id: heidelberg_failsafe_charge_current
            value: 6  # Setzt den Ladestrom für Kommunikationsfehler auf 6 A
        - number.set:
            id: heidelberg_powersave
            value: 1  # Turn off powermanagement.


switch:
  - platform: gpio
    name: "WB Master"
    pin: GPIO16
    inverted: yes
  - platform: template
    name: "WB Powersave aktiv"
    lambda: |-
      return (id(heidelberg_powersave).state == 0);
    turn_on_action:
        - number.set:
            id: heidelberg_powersave
            value: 0  # Turn on powermanagement.    
    turn_off_action:
        - number.set:
            id: heidelberg_powersave
            value: 4  # Turn on powermanagement.
    entity_category: diagnostic

# UART configuration for RS485
uart:
  id: mod_uart
  tx_pin: GPIO01 # TX pin for RS485 module
  rx_pin: GPIO03 # RX pin for RS485 module
  baud_rate: 19200 # Heidelberg Wallbox default baud rate
  parity: EVEN # Communication parameters: 8E1 (8 data bits, Even parity, 1 stop bit)
  stop_bits: 1


# Modbus configuration
modbus:
  id: mod_bus
  uart_id: mod_uart
  send_wait_time: 200ms # Wait time between Modbus requests


# Modbus Controller for Heidelberg Wallbox
modbus_controller:
  id: heidelberg_wallbox_id01
  address: 1 # Modbus Bus ID (matches S4 DIP switch, e.g., 0001)
  modbus_id: mod_bus
  command_throttle: 100ms # Minimum time between requests
  update_interval: 5s # How often to poll the Wallbox
  on_online:
    then:
    - logger.log: "wallbox back online!"
  on_offline:
    then:
    - logger.log: "wallbox is offline!"


# Example Sensors (read Wallbox data)
sensor:
  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: heidelberg_softwareversion
    internal: true
    accuracy_decimals: 0
    address: 0x0004 # Register for charging state
    register_type: read
    value_type: U_WORD
    lambda: |-
      return (x -156);
  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: wb_ladestatus_num
    internal: yes
    address: 0x0005 # Register for charging state
    register_type: read
    value_type: U_WORD
  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: heidelberg_current_l1
    name: "WB Strom L1"
    address: 0x0006 # Register for L1 current (RMS, in 0.1A)
    register_type: read
    value_type: U_WORD
    unit_of_measurement: A
    accuracy_decimals: 1
    filters:
    - multiply: 0.1 # Convert to Amperes
  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: heidelberg_current_l2
    name: "WB Strom L2"
    address: 0x0007 # Register for L2 current (RMS, in 0.1A)
    register_type: read
    value_type: U_WORD
    unit_of_measurement: A
    accuracy_decimals: 1
    filters:
    - multiply: 0.1 # Convert to Amperes
  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: heidelberg_current_l3
    name: "WB Strom L3"
    address: 0x0008 # Register for L3 current (RMS, in 0.1A)
    register_type: read
    value_type: U_WORD
    unit_of_measurement: A
    accuracy_decimals: 1
    filters:
    - multiply: 0.1 # Convert to Amperes
  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: heidelberg_temperature
    name: "WB Temperatur"
    address: 0x0009 # Register for L1 current (RMS, in 0.1A)
    register_type: read
    value_type: S_WORD
    unit_of_measurement: C
    accuracy_decimals: 0
    filters:
    - multiply: 0.1 # Convert to Amperes
  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: heidelberg_voltage_l1
    name: "WB Spannung L1"
    address: 0x000A # Register for L1 voltage (RMS, in V)
    register_type: read
    value_type: U_WORD
    unit_of_measurement: V
    accuracy_decimals: 0
  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: heidelberg_voltage_l2
    name: "WB Spannung L2"
    address: 0x000B # Register for L1 voltage (RMS, in V)
    register_type: read
    value_type: U_WORD
    unit_of_measurement: V
    accuracy_decimals: 0
  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: heidelberg_voltage_l3
    name: "WB Spannung L3"
    address: 0x000C # Register for L1 voltage (RMS, in V)
    register_type: read
    value_type: U_WORD
    unit_of_measurement: V
    accuracy_decimals: 0
  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: power
    name: "WB Leistung"
    address: 0x000e # Register for total power (in VA)
    register_type: read
    value_type: U_WORD
    unit_of_measurement: W
    accuracy_decimals: 0
  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: heidelberg_energy_powerup_high_byte
    name: "WB Energie-powerup-High-Byte"
    address: 0x000f
    register_type: read
    value_type: U_WORD
    unit_of_measurement: Wh
    accuracy_decimals: 0
    internal: true
  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: heidelberg_energy_powerup_low_byte
    name: "WB Energie-Low-Byte"
    address: 0x0010
    register_type: read
    value_type: U_WORD
    unit_of_measurement: Wh
    accuracy_decimals: 0
    internal: true
  - platform: template
    id: heidelberg_energy_powerup
    name: "WB Energie seit Start"
    unit_of_measurement: Wh
    device_class: energy
    state_class: total_increasing
    update_interval: 1s
    lambda: |-
      if (id(heidelberg_energy_powerup_high_byte).has_state() && id(heidelberg_energy_powerup_low_byte).has_state()) {
        return (uint32_t(id(heidelberg_energy_powerup_high_byte).state) * 65536) + uint32_t(id(heidelberg_energy_powerup_low_byte).state);
      } else {
        return NAN;
      }
  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: heidelberg_energy_high_byte
    name: "WB Energie-High-Byte"
    address: 0x0011
    register_type: read
    value_type: U_WORD
    unit_of_measurement: Wh
    accuracy_decimals: 0
    internal: true
  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: heidelberg_energy_low_byte
    name: "WB Energie-Low-Byte"
    address: 0x0012
    register_type: read
    value_type: U_WORD
    unit_of_measurement: Wh
    accuracy_decimals: 0
    internal: true
  - platform: template
    id: heidelberg_energy_total
    name: "WB Energie gesamt"
    unit_of_measurement: Wh
    device_class: energy
    state_class: total_increasing
    update_interval: 1s
    lambda: |-
      if (id(heidelberg_energy_high_byte).has_state() && id(heidelberg_energy_low_byte).has_state()) {
        return (uint32_t(id(heidelberg_energy_high_byte).state) * 65536) + uint32_t(id(heidelberg_energy_low_byte).state);
      } else {
        return NAN;
      }
  - platform: template
    id: heidelberg_sw_version
    name: "WB Softwareversion"
    lambda: |-
      return (id(heidelberg_softwareversion).state);
    entity_category: diagnostic


number:
  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: heidelberg_charge_current
    name: "WB Ladestrom"
    address: 0x0105 # Holding register for max current command
    register_type: holding
    value_type: U_WORD
    min_value: 0 # Minimum current (6A)
    max_value: 16 # Maximum current (16A)
    step: 1
    unit_of_measurement: A
    lambda: |-
      return x / 10;
    # Convert to Amperes, map 1-5A to 6A
    # multiply by 10, 1A = 10
    write_lambda: |-
      if (x >= 1 && x <= 5) {
      return 60;
      } else {
      return x * 10;
      }
  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: heidelberg_watchdog
    name: "WB Watchdog Timer"
    internal: yes
    address: 0x0101 # Holding register for max current command
    register_type: holding
    value_type: U_WORD
    min_value: 0 # value in seconds, 0=off
    max_value: 65 # Maximum is 65s
    step: 1
    unit_of_measurement: s
    lambda: |-
      return x / 1000;
    write_lambda: |-
      return x * 1000;
  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: heidelberg_powersave
    name: "WB Powersaving disable"
    internal: yes
    address: 0x0102 # Holding register for max current command
    register_type: holding
    value_type: U_WORD
    min_value: 0 # value in seconds, 0=off
    max_value: 4 # Maximum is 65s
    step: 4
    # only bit 2 is relevant, either 0 or 4, 4=disable
  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: heidelberg_failsafe_charge_current
    name: "WB Failsafe Charge Current"
    address: 0x0106 # Holding register for max current command
    register_type: holding
    value_type: U_WORD
    min_value: 0 # Minimum current (6A), 0=off
    max_value: 16 # Maximum current (16A) remember we have 3 phases, 16A=11kW
    step: 1
    unit_of_measurement: A
    # read: divide by 10 because 10 -> 1A
    lambda: |-
      return x / 10;
    # write: Convert to Amperes, 1-5A is disallowed
    # multiply by 10, because 1A -> 10
    write_lambda: |-
      if (x >= 1 && x <= 5) {
      return 60;
      } else {
      return x * 10;
      }


text_sensor:
  - platform: template
    id: WB_Ladestatus
    name: "WB-Ladestatus"
    lambda: |-
      auto value = id(wb_ladestatus_num).state;
      switch ((uint16_t)value) {
      case 2: return std::string("Gesperrt-frei");
      case 3: return std::string("Leerlauf-frei");
      case 4: return std::string("Gesperrt-belegt");
      case 5: return std::string("Leerlauf");
      case 6: return std::string("nein-6");
      case 7: return std::string("ja-7");
      case 8: return std::string("reduziert");
      case 9: return std::string("Fehler9");
      case 10: return std::string("gesperrt");
      default: return std::string("Fehler");
      }
